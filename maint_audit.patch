--- README.md
+++ README.md
@@ -1,4 +1,4 @@
-# Minecraft Server on Proxmox – Version 2.0 (updated 2025-10-07)
+# Minecraft Server on Proxmox
 
 <img title="" src="assets/banner.png" alt="Banner" width="326" data-align="center">
 
@@ -16,27 +16,24 @@
 
 ---
 
-## ✅ Requirements
-- Proxmox VE: 7.4+ / 8.x / 9.x
-- Gast-OS: Debian 12/13 oder Ubuntu 24.04
-- CPU/RAM: ≥2 vCPU, ≥2–4 GB RAM (Java), ≥1–2 GB (Bedrock)
-- Storage: ≥10 GB SSD
-- Netzwerk: Bridged NIC (vmbr0), offene Ports 25565/TCP, 19132/UDP
+## Quick Links
 
----
+- [Server Commands](SERVER_COMMANDS.md)
+- [Simulation Guide](SIMULATION.md)
+- [Bedrock Networking](docs/BEDROCK_NETWORKING.md)
+- [Copilot Workflow](.github/copilot-instructions.md)
+- Issues: Open an issue on the repository's Issues page
 
-## 📝 Introduction
+## Introduction
 
-This repository lets you deploy a high-performance Minecraft server (Java & Bedrock) on your Proxmox host in minutes.  
-Designed for both VMs and LXC containers, it provides easy CLI-first installation, automated backups, and update scripts.  
+This repository lets you deploy a high-performance Minecraft server (Java & Bedrock) on your Proxmox host in minutes.
+Designed for both VMs and LXC containers, it provides easy CLI-first installation, automated backups, and update scripts.
 Perfect for self-hosters, gaming communities, and homelab enthusiasts!
 
-> Note for this workspace: Simulation only
-> We do not execute or install anything here. When asked to "run", we only show and explain commands. See SIMULATION.md for the simulated flow of each script.
-
+## Status
 
-## ✅ Requirements
+Stable. VM and LXC tested. Bedrock updates remain manual.
+
+## Requirements
 - Proxmox VE: 7.4+ / 8.x / 9.x
 - Guest OS: Debian 11/12/13 or Ubuntu 24.04
 - CPU/RAM: ≥2 vCPU, ≥2–4 GB RAM (Java), ≥1–2 GB (Bedrock)
@@ -45,12 +42,6 @@
 
 Java 21 is required. If OpenJDK 21 is missing in your repositories, the installers automatically fall back to Amazon Corretto 21 (APT with signed-by keyring).
 
-
-![Proxmox](https://img.shields.io/badge/Proxmox-VE-EE7F2D?logo=proxmox&logoColor=white)
-![Debian](https://img.shields.io/badge/Debian-11%20%2F%2012%20%2F%2013-A81D33?logo=debian&logoColor=white)
-![Ubuntu](https://img.shields.io/badge/Ubuntu-24.04-E95420?logo=ubuntu&logoColor=white)
-![Java](https://img.shields.io/badge/OpenJDK-17%20%2F%2021-007396?logo=java&logoColor=white)
-![Minecraft](https://img.shields.io/badge/Minecraft-Java%20%2F%20Bedrock-62B47A?logo=minecraft&logoColor=white)
-![Bash](https://img.shields.io/badge/Bash-%E2%9C%94-4EAA25?logo=gnubash&logoColor=white)
-![Systemd](https://img.shields.io/badge/systemd-%E2%9C%94-FFDD00?logo=linux&logoColor=black)
-![Screen](https://img.shields.io/badge/screen-%E2%9C%94-0077C2?logo=gnu&logoColor=white)
-
-
-## 📊 Status
-
-
-
-Stable. VM and LXC tested. Bedrock updates remain manual.
-
 ## Quickstart
 
 ### VM (DHCP)
@@ -67,19 +58,15 @@
 sudo -u minecraft screen -r minecraft
 ```
 
-> Debian 11/12/13: Ensure `/run/screen` exists with `root:utmp` and mode `0775` (see below).
-
-> Hinweis (Debian 12/13): screen benötigt `/run/screen` mit root:utmp und 0775. Persistenz nach Reboot:
-
-> ```bash
-> sudo install -d -m 0775 -o root -g utmp /run/screen
-> printf 'd /run/screen 0775 root utmp -\n' | sudo tee /etc/tmpfiles.d/screen.conf
-> sudo systemd-tmpfiles --create /etc/tmpfiles.d/screen.conf
-> ```
-
-### Empfohlen (Java): systemd statt screen
+Ensure `/run/screen` exists with `root:utmp` and mode `0775`:
 
 ```bash
+sudo install -d -m 0775 -o root -g utmp /run/screen
+printf 'd /run/screen 0775 root utmp -\n' | sudo tee /etc/tmpfiles.d/screen.conf
+sudo systemd-tmpfiles --create /etc/tmpfiles.d/screen.conf
+```
+
+Recommended (Java): systemd instead of screen:
+
+```bash
 sudo cp minecraft.service /etc/systemd/system/minecraft.service && sudo systemctl daemon-reload && sudo systemctl enable --now minecraft
 ```
 
@@ -98,8 +85,7 @@
 sudo netplan apply
 ```
 
-> Passe Nameserver an lokale Resolver (Pi-hole/Unbound) an.
-
-Then run the installer as above.
+Adjust nameservers to local resolvers (Pi-hole/Unbound) as needed. Then run the installer as above.
 
 ### LXC/CT
 
@@ -141,7 +127,7 @@
 
-## 🗃️ Backups
+## Backups
 
 ### Option A: systemd
 
@@ -190,27 +176,15 @@
 45 3 * * * tar -czf /var/backups/minecraft/bedrock-$(date +\%F).tar.gz /opt/minecraft-bedrock
 ```
 
-
-## ♻️ Auto-Update
-
+## Auto-Update (Java)
 
 ```bash
 cd /opt/minecraft
 ./update.sh
 ```
 
-
+Cron example:
 ```bash
 cd /opt/minecraft && ./update.sh
 crontab -e
 0 4 * * 0 /opt/minecraft/update.sh >> /var/log/minecraft-update.log 2>&1
 ```
 
-> Bedrock requires manual download from Mojang (`setup_bedrock.sh` enforces checksum; see below).
-
-
-**Bedrock Sicherheit:** `setup_bedrock.sh` erzwingt per Default eine SHA256-Prüfung. Setze `REQUIRED_BEDROCK_SHA256` vor dem Run; oder überschreibe mit `REQUIRE_BEDROCK_SHA=0`.
+Bedrock requires manual download from Mojang. `setup_bedrock.sh` enforces checksum by default.
 
 ## Configuration
 
-### /etc/mc_backup.conf
-
-
-
 ### JVM memory (Java)
 
-Autosized by installer: `Xms ≈ RAM/4`, `Xmx ≈ RAM/2` with floors `256M/448M`.
+Memory is autosized by installer: `Xms ≈ RAM/4`, `Xmx ≈ RAM/2` with floors `256M/448M`.
 Edit `/opt/minecraft/start.sh` to override:
 
 ```bash
@@ -232,15 +206,15 @@
 java -Xms2G -Xmx4G -jar server.jar nogui
 ```
 
+## Integrity & Firewall
 
-### Integrity
-
+### Integrity
 
-## Firewall
+- Java: Paper download verified via SHA256; min size check >5MB to avoid HTML error saves
+- Bedrock: REQUIRE_BEDROCK_SHA=1 by default; REQUIRED_BEDROCK_SHA256 must be set (override REQUIRE_BEDROCK_SHA=0)
 
+### Firewall
+
 ```bash
 sudo apt-get install -y ufw
-sudo ufw allow 25565/tcp    # Java
-sudo ufw allow 19132/udp    # Bedrock
+sudo ufw allow 25565/tcp
+sudo ufw allow 19132/udp
 sudo ufw enable
 
-# IPv6 (optional)
+# Optional IPv6
 sudo ufw allow 25565/tcp comment "Minecraft Java v6"
 sudo ufw allow 19132/udp comment "Minecraft Bedrock v6"
 ```
 
-
-## Optional: systemd service (Java)
-
-```bash
-sudo cp minecraft.service /etc/systemd/system/minecraft.service
-sudo systemctl daemon-reload
-sudo systemctl enable --now minecraft
-```
-
-## Optional: systemd service (Bedrock)
-
-```bash
-sudo tee /etc/systemd/system/minecraft-bedrock.service >/dev/null <<'EOF'
-[Unit]
-Description=Minecraft Bedrock Server
-After=network-online.target
-Wants=network-online.target
-StartLimitIntervalSec=0
-
-[Service]
-Type=simple
-WorkingDirectory=/opt/minecraft-bedrock
-User=minecraft
-Group=minecraft
-ExecStart=/usr/bin/screen -DmS bedrock /bin/bash -lc './start.sh'
-ExecStop=/usr/bin/screen -S bedrock -X quit
-Restart=on-failure
-RestartSec=5
-NoNewPrivileges=yes
-ProtectSystem=full
-ProtectHome=yes
-PrivateTmp=yes
-
-[Install]
-WantedBy=multi-user.target
-EOF
-
-sudo systemctl daemon-reload
-sudo systemctl enable --now minecraft-bedrock
-```
-
-
-## 🕹️ Admin/Commands
-
-
+## Admin/Commands
 
-## Troubleshooting
+See [SERVER_COMMANDS.md](SERVER_COMMANDS.md) for detailed command reference.
 
+## Troubleshooting
 
+- Check service status: `sudo systemctl status minecraft`
+- View logs: `journalctl -u minecraft -f`
+- Restart if needed: `sudo systemctl restart minecraft`
 
 ## Contributing
 
+For development workflow, see [.github/copilot-instructions.md](.github/copilot-instructions.md).
 
 ## License
 
 [MIT](LICENSE)
 
-> Proxmox helper: see `scripts/proxmox_create_ct_bedrock.sh` to auto-create a Debian 12 CT and install Bedrock (run on Proxmox host).
-> **Hinweis:** Das Proxmox-Helper-Skript unterstützt jetzt **Debian 12 und 13** (CT-Templates werden automatisch gewählt). Für andere Distributionen bitte Skript und Doku anpassen.
-
-
-## ☕ Support / Donate
+## Support / Donate
 
 If you find these tools useful and want to support development:
 
-
 [![Buy Me A Coffee](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://buymeacoffee.com/timintech)
--- SIMULATION.md
+++ SIMULATION.md
@@ -1,4 +1,4 @@
-# Simulation Guide – Do not execute locally
+# Simulation Guide
 
 This repository contains shell scripts for installing and managing a Minecraft server on Proxmox hosts and guests. In this workspace, we operate in simulation-only mode: do not execute commands here. When asked to run, only show and explain the commands; do not install or modify this machine.
 
@@ -34,23 +34,20 @@
 ## What each script does (simulated)
 
 ### setup_minecraft.sh (VM – Java Edition)
 
-Installs a PaperMC-based Java server under /opt/minecraft.
+OpenJDK 21 preferred; fallback to Amazon Corretto 21 via APT signed keyring; Paper API SHA256 verification; min-size >5MB; autosize Xms≈RAM/4, Xmx≈RAM/2 floors 256M/448M cap 16G; start in screen or systemd.
 
-* Packages: apt update/upgrade, installs screen, wget, curl, jq, unzip.
-* Java: attempts OpenJDK 21; if unavailable, falls back to Amazon Corretto 21.
-* Filesystem: creates `/opt/minecraft` owned by `minecraft`.
-* **Download**: queries the PaperMC API to get the latest version/build and downloads `server.jar` (SHA256 verified).
-* EULA: writes `eula.txt` with `eula=true`.
-* Start script: creates `start.sh` with autosized memory (`Xms ≈ RAM/4`, `Xmx ≈ RAM/2`, floors `256M/448M`).
-* Runtime: starts the server in a detached GNU screen session `minecraft`.
+### setup_minecraft_lxc.sh (LXC/Container – Java Edition)
 
-Expected state:
+Same as VM variant but without sudo. OpenJDK 21 preferred; fallback to Amazon Corretto 21 via APT signed keyring; Paper API SHA256 verification; min-size >5MB; autosize Xms≈RAM/4, Xmx≈RAM/2 floors 256M/448M cap 16G; start in screen or systemd.
 
-* `/opt/minecraft` with `server.jar`, `eula.txt`, `start.sh`, later `logs/`, `world/`, `plugins/`.
-* Port `25565/tcp` listening.
+### setup_bedrock.sh (VM/CT – Bedrock Edition)
 
-### setup_minecraft_lxc.sh (LXC/Container – Java Edition)
+Scrape official Mojang page, validate Content-Type (zip or octet-stream), enforce REQUIRED_BEDROCK_SHA256 unless REQUIRE_BEDROCK_SHA=0; unzip -tq; start via screen.
 
-Same as VM variant but without `sudo`. Also creates `/run/screen` (root:utmp, 0775) inside the CT for screen sockets.
+### update.sh (Java Edition updater)
 
-### setup_bedrock.sh (VM/CT – Bedrock Edition)
+Fetch latest Paper build; verify SHA; min-size check.
 
-* Installs deps, creates `/opt/minecraft-bedrock`, scrapes Mojang Bedrock link, checks `Content-Type`, downloads zip.
-* Prints SHA256 of the zip and **enforces** it by default (`REQUIRED_BEDROCK_SHA256` must be set unless `REQUIRE_BEDROCK_SHA=0`).
-* Tests and extracts zip; creates `start.sh` and launches a `screen` session `bedrock`.
-
-### update.sh (Java Edition updater)
-
-* Resolves latest Paper build via API, downloads `server.jar`, verifies SHA256, replaces file.
-
 ## Networking
 
-* Java: TCP 25565; Bedrock: UDP 19132.
-
-## Backups & recovery
-
-* See README for `systemd` timer or cron examples.
+Java: TCP 25565; Bedrock: UDP 19132.
 
 ## Risks & safeguards
 
-* Network downloads may change/fail; verify connectivity and API.
-* Low-memory CTs: installer uses conservative floors to avoid OOM; you can further lower values in `start.sh` if needed.
-
----
-
-**Done.**
-
-Ersetze die oben gelisteten Dateien in deinem Arbeitsbaum und committe/pushe wie gewohnt:
-
-```bash
-git add README.md setup_minecraft.sh setup_minecraft_lxc.sh SIMULATION.md
-git commit -m "fix: installer downloads server.jar with SHA check; tiny-CT RAM floors; remove broken banner"
-git push
-```
+Network downloads may change/fail; verify connectivity and API. Low-memory CTs: installer uses conservative floors to avoid OOM; you can further lower values in `start.sh` if needed.
--- SERVER_COMMANDS.md
+++ SERVER_COMMANDS.md
@@ -1,4 +1,4 @@
-# 📘 Minecraft Server Control – Commands & Admin Guide (LXC/VM)
+# Minecraft Server Control - Commands & Admin Guide (LXC/VM)
 
 This guide contains useful commands to manage a Minecraft server (Java or Bedrock Edition) installed via Proxmox LXC container or VM.
 
@@ -6,7 +6,7 @@
 
-## 📂 Directory Structure
+## Directory Structure
 
 ```bash
 cd /opt/minecraft         # Java Edition
@@ -14,7 +14,7 @@
 
 ---
 
-## ▶️ Starting the Server
+## Starting the Server
 
 ```bash
 cd /opt/minecraft
@@ -42,7 +42,7 @@
 
 ---
 
-## 🔁 Stopping the Server (from Terminal)
+## Stopping the Server (from Terminal)
 
 In the screen session with the server running:
 
@@ -54,7 +54,7 @@
 
 ---
 
-## 📦 Updating the Java (PaperMC) Server
+## Updating the Java (PaperMC) Server
 
 ```bash
 cd /opt/minecraft
@@ -65,7 +65,7 @@
 
 ---
 
-## ❗ Bedrock Edition Notice
+## Bedrock Edition Notice
 
 Bedrock **cannot be updated automatically**. Instead, run:
 
@@ -78,7 +78,7 @@
 
 ---
 
-## ⚙️ Advanced Options
+## Advanced Options
 
 ### Adjusting RAM Allocation (Java)
 
@@ -96,7 +96,7 @@
 
 ---
 
-## 🧼 Log Files
+## Log Files
 
 ```bash
 cd /opt/minecraft/logs/
@@ -104,7 +104,7 @@
 
 ---
 
-# 🧠 Useful In-Game Admin Commands
+# Useful In-Game Admin Commands
 
 If you're listed as OP (`ops.json`):
 
@@ -116,7 +116,7 @@
 
 ---
 
-## ✅ Grant OP Status (via Console or In-Game)
+## Grant OP Status (via Console or In-Game)
 
 ```bash
 op <playername>
@@ -130,7 +130,7 @@
 
 ---
 
-## 📜 Frequently Used Commands
+## Frequently Used Commands
 
 | Command                        | Description                          |
 | ------------------------------ | ------------------------------------ |
@@ -148,7 +148,7 @@
 
 ---
 
-## 🧪 Tips for Enabling Cheats
+## Tips for Enabling Cheats
 
 To use these commands:
 
@@ -157,7 +157,7 @@
 
 ---
 
-## 📁 Editing the `ops.json` File (optional)
+## Editing the `ops.json` File (optional)
 
 Located at:
 
@@ -179,7 +179,7 @@
 
 ---
 
-# 🎮 Command Blocks (Java & Bedrock)
+# Command Blocks (Java & Bedrock)
 
 Command blocks enable automation using Redstone and custom logic.
 
@@ -194,7 +194,7 @@
 
 ---
 
-## 🧩 Example Command Block Uses
+## Example Command Block Uses
 
 | Command                                 | Description                            |
 | --------------------------------------- | -------------------------------------- |
@@ -207,7 +207,7 @@
 
 ---
 
-# 🪨 Bedrock-Specific Commands
+# Bedrock-Specific Commands
 
 | Command                              | Description                    |                                      |
 | ------------------------------------ | ------------------------------ | ------------------------------------ |
@@ -220,4 +220,4 @@
 
 ---
 
-Happy crafting and managing your Minecraft server! 🧱
+Happy crafting and managing your Minecraft server!
--- setup_minecraft.sh
+++ setup_minecraft.sh
@@ -1,5 +1,5 @@
 #!/usr/bin/env bash
 set -euo pipefail
 
-# Festlegbare Minecraft-Version (verhindert SNAPSHOT/Pre-Release Überraschungen)
+# Fixed Minecraft version (prevents SNAPSHOT/Pre-Release surprises)
 MC_VER="${MC_VER:-1.21.10}"
@@ -10,8 +10,8 @@
 ensure_java() {
   # Prefer OpenJDK 21; fallback to Amazon Corretto 21 via APT keyring.
   if sudo apt-get install -y openjdk-21-jre-headless 2>/dev/null; then return; fi
-  # Debian 13 Fallback: Amazon Corretto 21 (signiertes Repo)
+  # Debian 13 Fallback: Amazon Corretto 21 (signed repo)
   sudo install -d -m 0755 /usr/share/keyrings
   curl -fsSL https://apt.corretto.aws/corretto.key | sudo gpg --dearmor -o /usr/share/keyrings/corretto.gpg
   echo "deb [signed-by=/usr/share/keyrings/corretto.gpg] https://apt.corretto.aws stable main" | sudo tee /etc/apt/sources.list.d/corretto.list >/dev/null
   sudo apt-get update
@@ -21,7 +21,7 @@
 ensure_java
 
-# screen socket dir (Debian erwartet root:utmp) + Persistenz via tmpfiles
+# screen socket dir (Debian expects root:utmp) + persistence via tmpfiles
 sudo install -d -m 0775 -o root -g utmp /run/screen
 printf 'd /run/screen 0775 root utmp -\n' | sudo tee /etc/tmpfiles.d/screen.conf >/dev/null
 sudo systemd-tmpfiles --create /etc/tmpfiles.d/screen.conf || true
@@ -36,14 +36,14 @@
 # EULA
 echo "eula=true" | sudo tee eula.txt >/dev/null
 
-# Download Paper für feste $MC_VER (mit SHA256-Verifikation)
+# Download Paper for fixed $MC_VER (with SHA256 verification)
 LATEST_BUILD="$(curl -fsSL "https://api.papermc.io/v2/projects/paper/versions/${MC_VER}" | jq -r '.builds | last')"
 BUILD_JSON="$(curl -fsSL "https://api.papermc.io/v2/projects/paper/versions/${MC_VER}/builds/${LATEST_BUILD}")"
 EXPECTED_SHA="$(printf '%s' "$BUILD_JSON" | jq -r '.downloads.application.sha256')"
 JAR_NAME="$(printf '%s' "$BUILD_JSON" | jq -r '.downloads.application.name')"
 
 sudo wget -qO server.jar "https://api.papermc.io/v2/projects/paper/versions/${MC_VER}/builds/${LATEST_BUILD}/downloads/${JAR_NAME}"
-# Minimalgröße absichern gegen HTML-Fehldownloads (>5MB)
+# Minimum size protection against HTML error downloads (>5MB)
-[ "$(stat -c%s server.jar)" -gt 5000000 ] || { echo "ERROR: server.jar zu klein/ungültig" >&2; exit 1; }
+[ "$(stat -c%s server.jar)" -gt 5000000 ] || { echo "ERROR: server.jar too small/invalid" >&2; exit 1; }
 
 ACTUAL_SHA="$(sha256sum server.jar | awk '{print $1}')"
 if [ -n "$EXPECTED_SHA" ] && [ "$EXPECTED_SHA" != "null" ] && [ "$ACTUAL_SHA" != "$EXPECTED_SHA" ]; then
@@ -66,7 +66,7 @@
 chmod +x start.sh
 
 if [ "$USE_SYSTEMD" = "1" ]; then
-  # systemd-Service schreiben & starten
+  # Write and start systemd service
   sudo tee /etc/systemd/system/minecraft.service >/dev/null <<'EOF'
 [Unit]
 Description=Minecraft Server (Paper)
@@ -76,7 +76,7 @@
 User=minecraft
 Group=minecraft
 WorkingDirectory=/opt/minecraft
-ExecStart=/usr/bin/bash /opt/minecraft/start.sh
+ExecStart=/opt/minecraft/start.sh
 SuccessExitStatus=0 143
 Restart=on-failure
 RestartSec=5
@@ -103,11 +103,11 @@
   sudo systemctl daemon-reload
   sudo systemctl enable --now minecraft
 else
-  # Start in screen (Fallback)
+  # Start in screen (fallback)
   if command -v runuser >/dev/null 2>&1; then
     runuser -u minecraft -- bash -lc 'cd /opt/minecraft && screen -DmS minecraft ./start.sh'
   else
     sudo -u minecraft bash -lc 'cd /opt/minecraft && screen -DmS minecraft ./start.sh'
   fi
 fi
 
-echo "✅ Minecraft Java setup complete. Attach (screen): sudo -u minecraft screen -r minecraft"
+echo "Minecraft Java setup complete. Attach (screen): sudo -u minecraft screen -r minecraft"
--- setup_minecraft_lxc.sh
+++ setup_minecraft_lxc.sh
@@ -1,5 +1,5 @@
 #!/usr/bin/env bash
 set -euo pipefail
 
-# Festlegbare Minecraft-Version (Default, kann per ENV überschrieben werden)
+# Fixed Minecraft version (default, can be overridden via ENV)
 MC_VER="${MC_VER:-1.21.10}"
@@ -10,7 +10,7 @@
 ensure_java() {
   # Prefer OpenJDK 21; fallback to Amazon Corretto 21 via APT keyring (no sudo in LXC).
   if apt-get install -y openjdk-21-jre-headless 2>/dev/null; then return; fi
-  # NOTE: Adding a vendor APT source; restrict with signed-by keyring.
+  # Adding vendor APT source; restrict with signed-by keyring
   install -d -m 0755 /usr/share/keyrings
   curl -fsSL https://apt.corretto.aws/corretto.key | gpg --dearmor -o /usr/share/keyrings/corretto.gpg
   echo "deb [signed-by=/usr/share/keyrings/corretto.gpg] https://apt.corretto.aws stable main" > /etc/apt/sources.list.d/corretto.list
@@ -21,7 +21,7 @@
 ensure_java
 
-# screen socket dir (Debian expects root:utmp) + Persistenz via tmpfiles
+# screen socket dir (Debian expects root:utmp) + persistence via tmpfiles
 install -d -m 0775 -o root -g utmp /run/screen
 printf 'd /run/screen 0775 root utmp -\n' > /etc/tmpfiles.d/screen.conf
 systemd-tmpfiles --create /etc/tmpfiles.d/screen.conf || true
@@ -36,7 +36,7 @@
 # EULA
 echo "eula=true" > eula.txt
 
-# Download Paper für $MC_VER (SHA256 + Mindestgröße)
+# Download Paper for $MC_VER (SHA256 + minimum size)
 LATEST_BUILD="$(curl -fsSL "https://api.papermc.io/v2/projects/paper/versions/${MC_VER}" | jq -r '.builds | last')"
 BUILD_JSON="$(curl -fsSL "https://api.papermc.io/v2/projects/paper/versions/${MC_VER}/builds/${LATEST_BUILD}")"
 EXPECTED_SHA="$(printf '%s' "$BUILD_JSON" | jq -r '.downloads.application.sha256')"
@@ -44,7 +44,7 @@
 
 wget -qO server.jar "https://api.papermc.io/v2/projects/paper/versions/${MC_VER}/builds/${LATEST_BUILD}/downloads/${JAR_NAME}"
-[ "$(stat -c%s server.jar)" -gt 5000000 ] || { echo "ERROR: server.jar zu klein/ungültig" >&2; exit 1; }
+[ "$(stat -c%s server.jar)" -gt 5000000 ] || { echo "ERROR: server.jar too small/invalid" >&2; exit 1; }
 ACTUAL_SHA="$(sha256sum server.jar | awk '{print $1}')"
 if [ -n "$EXPECTED_SHA" ] && [ "$EXPECTED_SHA" != "null" ] && [ "$ACTUAL_SHA" != "$EXPECTED_SHA" ]; then
   echo "ERROR: PaperMC SHA256 mismatch (expected ${EXPECTED_SHA}, got ${ACTUAL_SHA})" >&2
@@ -74,7 +74,7 @@
 User=minecraft
 Group=minecraft
 WorkingDirectory=/opt/minecraft
-ExecStart=/usr/bin/bash /opt/minecraft/start.sh
+ExecStart=/opt/minecraft/start.sh
 SuccessExitStatus=0 143
 Restart=on-failure
 RestartSec=5
@@ -99,11 +99,11 @@
   systemctl daemon-reload
   systemctl enable --now minecraft
 else
-  # Start in screen (Fallback)
+  # Start in screen (fallback)
   if command -v runuser >/dev/null 2>&1; then
     runuser -u minecraft -- bash -lc 'cd /opt/minecraft && screen -DmS minecraft ./start.sh'
   else
     su -s /bin/bash -c 'cd /opt/minecraft && screen -DmS minecraft ./start.sh' minecraft
   fi
 fi
 
-echo "✅ Minecraft Java setup complete (LXC). Attach: screen -r minecraft"
+echo "Minecraft Java setup complete (LXC). Attach: screen -r minecraft"
--- setup_bedrock.sh
+++ setup_bedrock.sh
@@ -5,7 +5,7 @@
 apt update
 apt install -y unzip wget screen curl ca-certificates
 
-# Nutzer & Verzeichnisse
+# User & directories
 if ! id -u minecraft >/dev/null 2>&1; then
   useradd -r -m -s /bin/bash minecraft
 fi
@@ -13,17 +13,17 @@
 install -d -m 0755 -o minecraft -g minecraft /opt/minecraft-bedrock
 cd /opt/minecraft-bedrock
 
-# Letzte Bedrock-URL ermitteln
+# Determine latest Bedrock URL
 HTML="$(curl -fsSL https://www.minecraft.net/en-us/download/server/bedrock)"
 LATEST_URL="$(printf '%s' "$HTML" | grep -Eo 'https://[^"[:space:]]*bedrock-server-[0-9.]+\.zip' | head -n1 || true)"
 if [[ -z "${LATEST_URL}" ]]; then
   echo "ERROR: Could not find Bedrock server URL" >&2
   exit 1
 fi
 
-# Content-Type prüfen (robust gegen CR in Headern, folgt Redirects)
+# Check Content-Type (robust against CR in headers, follows redirects)
 HEAD_OUT="$(curl -fsSIL "$LATEST_URL" | tr -d '\r')"
-if ! printf '%s' "$HEAD_OUT" | grep -iqE '^content-type:\s*(application/zip|application/octet-stream)(\s*;|$)'; then
+if ! printf '%s' "$HEAD_OUT" | grep -iqE '^content-type:\s*(application/(zip|octet-stream))(\s*;|$)'; then
   echo "ERROR: unexpected content-type for $LATEST_URL" >&2
   echo "Got headers:" >&2
   printf '%s\n' "$HEAD_OUT" >&2
@@ -35,7 +35,7 @@
   exit 1
 fi
 
-# Sicherer Download in temporäre Datei
+# Safe download to temporary file
 TMP_ZIP="$(mktemp -p /tmp bedrock-server.XXXXXX.zip)"
 trap 'rm -f "$TMP_ZIP"' EXIT
 
@@ -56,7 +56,7 @@
   fi
 fi
 
-# ZIP testen & entpacken
+# Test ZIP & extract
 unzip -tq "$TMP_ZIP" >/dev/null
 unzip -oq "$TMP_ZIP"
 
@@ -67,7 +67,7 @@
 fi
 chmod +x ./bedrock_server || true
 
-# Startskript
+# Start script
 cat > start.sh <<'EOF'
 #!/usr/bin/env bash
 set -euo pipefail
@@ -77,7 +77,7 @@
 
 chown -R minecraft:minecraft /opt/minecraft-bedrock
 
-# Start in screen
+# Start in screen
 if command -v runuser >/dev/null 2>&1; then
   runuser -u minecraft -- bash -lc 'cd /opt/minecraft-bedrock && screen -DmS bedrock ./start.sh'
 else
@@ -85,4 +85,4 @@
 fi
 
-echo "✅ Setup complete. Attach: screen -r bedrock"
+echo "Setup complete. Attach: screen -r bedrock"
--- minecraft.service
+++ minecraft.service
@@ -7,7 +7,7 @@
 User=minecraft
 Group=minecraft
 WorkingDirectory=/opt/minecraft
 ExecStart=/opt/minecraft/start.sh
 Restart=on-failure
 UMask=0027
 SuccessExitStatus=0 143
@@ -14,18 +14,18 @@
 TimeoutStopSec=30
 
-# NOTE: Systemd hardening options to reduce attack surface
+# Systemd hardening options to reduce attack surface
 NoNewPrivileges=true
 ProtectSystem=full
 ProtectHome=true
 PrivateTmp=true
 ProtectKernelTunables=true
 ProtectKernelModules=true
 ProtectControlGroups=true
 RestrictSUIDSGID=true
 RestrictNamespaces=true
 CapabilityBoundingSet=
 AmbientCapabilities=
 ReadWritePaths=/opt/minecraft
 
-# Optional: set RETAIN_DAYS via Environment or drop-in. Example cleanup after start:
-#ExecStartPost=/bin/bash -lc 'BACKUP_DIR=${BACKUP_DIR:-/var/backups/minecraft}; mkdir -p "$BACKUP_DIR"; find "$BACKUP_DIR" -type f -name "*.tar.gz" -mtime +"${RETAIN_DAYS:-7}" -delete'
-
 [Install]
 WantedBy=multi-user.target
--- .github/copilot-instructions.md
+++ .github/copilot-instructions.md
@@ -1,151 +1,75 @@
-# Copilot Run Instructions – Minecraft Server on Proxmox
+# Copilot Instructions - Minecraft Server on Proxmox
 
-## Zweck
+## Purpose
 
-Klar definierte Aufgaben für GitHub Copilot (CLI), um Skripte und Doku konsistent zu aktualisieren – inklusive Debian 13-Fallbacks.
+Clear tasks for GitHub Copilot (CLI) to consistently update scripts and documentation, including Debian 13 fallbacks.
 
-## Voraussetzungen
+## Prerequisites
 
-1. Git, GitHub CLI und Copilot CLI sind eingerichtet
-2. Du arbeitest im Repo-Klon
+1. Git, GitHub CLI, and Copilot CLI are set up
+2. Working in repository clone
 
 ```bash
 cd "$HOME/github_repos/minecraft-server-Proxmox"
 git status
 ```
 
----
+## Recommended Copilot Workflow
 
-## Häufige Aufgaben (Ausführen auf Zielsystem nach Bedarf)
-
-**Option 1: Java in VM**
-
-```bash
-chmod +x setup_minecraft.sh
-./setup_minecraft.sh
-sudo -u minecraft screen -r minecraft
-```
-
-**Option 2: Java in LXC**
-
-```bash
-chmod +x setup_minecraft_lxc.sh
-./setup_minecraft_lxc.sh
-sudo -u minecraft screen -r minecraft
-```
-
-**Option 3: Bedrock**
-
-```bash
-chmod +x setup_bedrock.sh
-./setup_bedrock.sh
-sudo -u minecraft screen -r bedrock
-```
-
-**Option 4: Java aktualisieren (PaperMC)**
-
-```bash
-chmod +x update.sh
-./update.sh
-```
-
-**Option 5: systemd Autostart (optional, Java)**
-
-```bash
-sudo cp minecraft.service /etc/systemd/system/minecraft.service
-sudo systemctl daemon-reload
-sudo systemctl enable --now minecraft
-```
-
----
-
-## Empfohlener Copilot-Workflow
-
-### 1) Branch vorbereiten
+### 1) Prepare branch
 
 ```bash
 cd "$HOME/github_repos/minecraft-server-Proxmox"
 git switch -c copilot/refactor || git switch copilot/refactor
 ```
 
-### 2) Ein-Prompt für Audit & Refactor (nur Diff ausgeben lassen)
-
-> Hinweis: Dieser Prompt weist Copilot an, **Debian 13** korrekt zu berücksichtigen.
+### 2) Generate unified diff
 
 ```bash
-gh copilot chat -p '
-Refactor this repo. Output a single unified diff file named refactor.diff (git apply -p0 friendly). Scope:
-
-1) setup_minecraft.sh + setup_minecraft_lxc.sh
-   - If OpenJDK 21 is missing on **Debian 13**, add fallback: install Amazon Corretto 21 via APT with
-     /usr/share/keyrings keyring and signed-by pin.
-   - Auto-size JVM memory from /proc/meminfo: -Xms = 1/4, -Xmx = 1/2 of RAM (min 1G/2G).
-   - Ensure /run/screen exists (chmod 775, root:utmp) before screen -dmS.
-
-2) setup_bedrock.sh
-   - Regex for artifact: bedrock-server-[0-9.]+\.zip
-   - HEAD check: Content-Type must be application/zip before download.
-   - Enforce checksum by default: REQUIRE_BEDROCK_SHA=1 and REQUIRED_BEDROCK_SHA256 mandatory.
-   - Create /run/screen as above.
-
-3) minecraft.service
-   - Run as User/Group=minecraft.
-   - Hardening: NoNewPrivileges=true, ProtectSystem=full, ProtectHome=true, PrivateTmp=true,
-     ProtectKernelTunables=true, ProtectKernelModules=true, ProtectControlGroups=true,
-     RestrictSUIDSGID=true, RestrictNamespaces=true, CapabilityBoundingSet=,
-     AmbientCapabilities=, ReadWritePaths=/opt/minecraft.
-
-4) Backups
-   - Add RETAIN_DAYS env default=7 and ExecStartPost cleanup with:
-     find "${BACKUP_DIR}" -type f -name "*.tar.gz" -mtime +"${RETAIN_DAYS}" -delete
-
-5) Docs
-   - Update README with: Java 21 requirement + Corretto fallback on Debian 13; UFW install before ufw commands;
-     memory auto-sizing note; Bedrock checksum enforcement note.
-   - Ensure this COPILOT_RUN_INSTRUCTIONS.md is linked from README.
-
-Constraints:
-- Produce only one file: refactor.diff (unified diff).
-- Touch only the files above + README.md + this COPILOT_RUN_INSTRUCTIONS.md as needed.
-- Keep changes minimal and consistent with current style.
-'
+gh copilot chat "Generate a maintenance audit patch for this repository focusing on English documentation, Debian 13 Java fallbacks, systemd hardening, and checksum enforcement"
 ```
 
-### 3) Diff speichern/prüfen
+### 3) Apply and validate
 
 ```bash
-ls -lh refactor.diff || nano refactor.diff
-```
-
-### 4) Diff anwenden & committen
-
-```bash
-git apply -p0 refactor.diff
+git apply maint_audit.patch
+shellcheck setup_*.sh update.sh
+systemd-analyze verify minecraft.service
 git status
-git add -A
-git commit -m "refactor: Debian 13 Corretto fallback, RAM autosize, Bedrock checksum, systemd hardening, docs"
 ```
 
-### 5) Rückweg bei Problemen
+### 4) Commit and push
 
 ```bash
-git restore -SW :/
-git reset --hard HEAD
+git add -A
+git commit -m "maint: English docs, Debian 13 fallbacks, systemd hardening"
+git push -u origin copilot/refactor
 ```
 
-### 6) Push & PR
+### 5) Create PR
 
 ```bash
-git push -u origin copilot/refactor
-gh pr create --fill --title "Refactor: Debian 13 + hardening" --body "Automated diff per COPILOT_RUN_INSTRUCTIONS.md"
+gh pr create --fill --title "Maintenance audit: Debian 13 + hardening" --body "Automated maintenance patch"
 ```
 
----
+## Notes
 
-## Hinweise
-
-* **Debian 13**: Corretto-Fallback (APT repo + keyring) aktivieren, wenn `openjdk-21-jre-headless` nicht verfügbar ist.
-* `screen`: vor Nutzung `/run/screen` mit `root:utmp` und `775` sicherstellen.
-* **Bedrock**: Standardmäßig Checksumme erzwingen (`REQUIRE_BEDROCK_SHA=1`); bekannten SHA in `REQUIRED_BEDROCK_SHA256` setzen.
-* **Firewall**: UFW ggf. zuerst installieren (`sudo apt-get install -y ufw`), dann Ports freigeben.
+- **Debian 13**: Enable Corretto fallback when OpenJDK 21 unavailable
+- **screen**: Ensure `/run/screen` with `root:utmp` and `775` permissions
+- **Bedrock**: Enforce checksum by default (`REQUIRE_BEDROCK_SHA=1`)
+- **Firewall**: Install UFW before configuring rules